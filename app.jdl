/* Store gateway application */
application {
  config {
    baseName store,
    applicationType gateway,
    packageName com.mycompany.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    databaseType sql,
    prodDatabaseType mysql,
    serverPort 8080,
    enableHibernateCache true,
    cacheProvider hazelcast,
    buildTool gradle,
    clientFramework angularX,
    clientPackageManager npm,
    clientTheme none,
    useSass true,
    nativeLanguage vi,
    languages [en, vi],
    websocket spring-websocket,
    testFrameworks [protractor],
  }
  entities *
}
/* Invoice microservice application */
application {
  config {
    baseName invoice,
    applicationType microservice,
    packageName com.mycompany.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    databaseType sql,
    prodDatabaseType mysql,
    enableHibernateCache true,
    cacheProvider hazelcast,
    buildTool gradle,
    serverPort 8081,
    nativeLanguage vi,
    languages [en, vi]
  }
  entities Invoice, Shipment
}
/* Notification microservice application */
application {
  config {
    baseName notification,
    applicationType microservice,
    packageName com.mycompany.store,
    serviceDiscoveryType eureka,
    authenticationType jwt,
    databaseType mongodb,
    enableHibernateCache false,
    cacheProvider no,
    buildTool gradle,
    serverPort 8082,
    nativeLanguage vi,
    languages [en, vi]
  }
  entities Notification
}
/* Entity for store service */
/**
 * Product sold by the online store
 * 
 * @author ThuanNP, ThuanPK, QuyenHVT, DanNQT, Hoan2NT.
 */
entity Product {
    name String required,
  description String,
  price BigDecimal required min(0),
  size Size required,
  image ImageBlob
}
enum Size {
    S, M, L, XL, XXL
}
/**
 * Entity for product category
 * 
 * @author ThuanNP, ThuanPK, QuyenHVT, DanNQT, Hoan2NT.
 */
entity ProductCategory {
    name String required,
  description String
}
/**
 * Entity for customer
 * 
 * @author ThuanNP, ThuanPK, QuyenHVT, DanNQT, Hoan2NT.
 */
entity Customer {
    firstName String,
  lastName String,
  gender Gender required,
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
  phone String required,
  addressLine1 String required,
  addressLine2 String,
  city String required,
  country String required
}
enum Gender {
    MALE, FEMALE, OTHER
}
/**
 * Entity for product order\
 * 
 * author ThuanNP, ThuanPK, QuyenHVT, DanNQT, Hoan2NT.
 */
entity ProductOrder {
    placeDate Instant required,
  status OrderStatus required,
  code String required
}
enum OrderStatus {
    COMPLETED, PENDING, CANCELLED
}
/**
 * Entity for order item
 * 
 * @author ThuanNP, ThuanPK, QuyenHVT, DanNQT, Hoan2NT.
 */
entity OrderItem {
    quantity Integer required min(0),
  totalPrice BigDecimal required min(0),
  status OrderItemStatus required
}
enum OrderItemStatus {
    AVAILABLE, OUT_OF_STOCK, BACK_ORDER
}
relationship OneToOne {
    Customer{user(login) required} to User
}
relationship ManyToOne {
    OrderItem{product(name) required} to Product
}
relationship OneToMany {
    ProductOrder{orderItem} to OrderItem{order(code) required} , ProductCategory{product} to Product{productCategory(name)} , Customer{order} to ProductOrder{customer(email) required}
}
/* Entities for Invoice microservice */
/**
 * Entity for invoice
 * 
 * @author ThuanNP, ThuanPK, QuyenHVT, DanNQT, Hoan2NT.
 */
entity Invoice {
    code String required,
  date Instant required,
  detail String,
  status InvoiceStatus required,
  paymentMethod PaymentMethod required,
  paymentDate Instant required,
  paymentAmount BigDecimal required,
  productOrderId Long required
}
enum InvoiceStatus {
    PAID, ISSUED, CANCELLED
}
enum PaymentMethod {
    CREDIT_CARD, CASH_ON_DELIVERY, PAYPAL
}
/**
 * Entity for shipment
 * 
 * @author ThuanNP, ThuanPK, QuyenHVT, DanNQT, Hoan2NT.
 */
entity Shipment {
    trackingCode String,
  date Instant,
  details String
}
microservice Invoice, Shipment with invoice
relationship OneToMany {
    Invoice{shipment} to Shipment{invoice(code) required}
}
/* Entities for notification microservice */
/**
 * Entities for notification microservice
 * 
 * @author ThuanNP, ThuanPK, QuyenHVT, DanNQT, Hoan2NT.
 */
entity Notification {
    date Instant required,
    details String,
    sentDate Instant required,
    format NotificationType required,
    userId Long required,
    productId Long required
}
enum NotificationType {
    EMAIL, SMS, PARCEL
}
microservice Notification with notification
/* General options */
service all with serviceClass
paginate Product, Customer, ProductOrder, OrderItem, Invoice, Shipment, ProductCategory with pagination
